################################################################################
#                       MAKEFILE FOR SAMPLEANALYZER TEST                       #
################################################################################

# Compilators
CXX = g++

# Options for compilation
CXXFLAGS = -Wall -O3 -I$(MA5_BASE)/tools/ -I/usr/local/include/root -DZIP_USE -DROOT_USE -DDELPHES_USE -DROOT_USE -DFASTJET_USE
LIBFLAGS = -L/usr/local/lib/root -lGpad -lHist -lGraf -lGraf3d -lTree -lRint -lPostscript -lMatrix -lPhysics -lMathCore -lEG -lRIO -lNet -lThread -lCore -lCint -pthread -lm -ldl -rdynamic -L$(MA5_BASE)/tools/SampleAnalyzer/Lib/ -lSampleAnalyzer -L/usr/lib -lz -lzlib_for_ma5 -L/Users/Renjie/work_invHiggs/MadGraph_Study/MadAnalysis5/madanalysis5/tools/delphes/ -lDelphes -ldelphes_for_ma5 $(shell fastjet-config --libs --plugins --rpath=no) -lfastjet_for_ma5

# Files to process
SRCS  = $(wildcard Test.cpp)

# Files to generate
OBJS    = $(SRCS:.cpp=.o)
PROGRAM = SampleAnalyzerTest

# Requirements to check before building
REQUIRED1 = $(MA5_BASE)/tools/SampleAnalyzer/Lib/libSampleAnalyzer.so
REQUIRED2 = $(MA5_BASE)/tools/SampleAnalyzer/Lib/libzlib_for_ma5.so
REQUIRED3 = $(MA5_BASE)/tools/SampleAnalyzer/Lib/libdelphes_for_ma5.so
REQUIRED4 = $(MA5_BASE)/tools/SampleAnalyzer/Lib/libfastjet_for_ma5.so

# Defining colours
GREEN  = "\\033[1;32m"
RED    = "\\033[1;31m"
PINK   = "\\033[1;35m"
BLUE   = "\\033[1;34m"
YELLOW = "\\033[1;33m"
CYAN   = "\\033[1;36m"
NORMAL = "\\033[0;39m"

# All target
all: header library_check compile_header compile link_header link

# Check library
library_check:
ifeq ($(wildcard $(REQUIRED1)),)
	@echo -e $(RED)"The shared library "$(REQUIRED1)" is not found"
	@echo -e $(RED)" 1) Please check that MadAnalysis 5 is installed in the folder : "$(MA5_BASE)
	@echo -e $(RED)" 2) Launch MadAnalysis 5 in normal mode in order to build this library."
	@echo -e $(NORMAL)
	@false
endif
ifeq ($(wildcard $(REQUIRED2)),)
	@echo -e $(RED)"The shared library "$(REQUIRED2)" is not found"
	@echo -e $(RED)" 1) Please check that MadAnalysis 5 is installed in the folder : "$(MA5_BASE)
	@echo -e $(RED)" 2) Launch MadAnalysis 5 in normal mode in order to build this library."
	@echo -e $(NORMAL)
	@false
endif
ifeq ($(wildcard $(REQUIRED3)),)
	@echo -e $(RED)"The shared library "$(REQUIRED3)" is not found"
	@echo -e $(RED)" 1) Please check that MadAnalysis 5 is installed in the folder : "$(MA5_BASE)
	@echo -e $(RED)" 2) Launch MadAnalysis 5 in normal mode in order to build this library."
	@echo -e $(NORMAL)
	@false
endif
ifeq ($(wildcard $(REQUIRED4)),)
	@echo -e $(RED)"The shared library "$(REQUIRED4)" is not found"
	@echo -e $(RED)" 1) Please check that MadAnalysis 5 is installed in the folder : "$(MA5_BASE)
	@echo -e $(RED)" 2) Launch MadAnalysis 5 in normal mode in order to build this library."
	@echo -e $(NORMAL)
	@false
endif

# Header target
header:
	@echo -e $(YELLOW)"--------------------------------------------------"
	@echo -e "                 Building MA5 job                 "
	@echo -e "--------------------------------------------------"$(NORMAL)

# Compile_header target
compile_header:
	@echo -e $(YELLOW)"--------------------------------------------------"
	@echo -e "                   Compilation                    "
	@echo -e "--------------------------------------------------"$(NORMAL)

# Link_header target
link_header:
	@echo -e $(YELLOW)"--------------------------------------------------"
	@echo -e "                  Final linking                   "
	@echo -e "--------------------------------------------------"$(NORMAL)

# clean_header target
clean_header:
	@echo -e $(YELLOW)"--------------------------------------------------"
	@echo -e "    Removing intermediate files from building     "
	@echo -e "--------------------------------------------------"$(NORMAL)

# mrproper_header target
mrproper_header:
	@echo -e $(YELLOW)"--------------------------------------------------"
	@echo -e "             Cleaning all the project             "
	@echo -e "--------------------------------------------------"$(NORMAL)

# Compile target
compile: $(OBJS)

# Object file target
$(OBJS): 

# Link target
link: $(OBJS)
	$(CXX) $(CXXFLAGS) $(OBJS) $(LIBFLAGS) -o $(PROGRAM)

# Clean target
clean: clean_header do_clean

# Do clean target
do_clean: 
	@rm -f $(OBJS)

# Mr Proper target 
mrproper: mrproper_header do_mrproper

# Do Mr Proper target 
do_mrproper: do_clean
	@rm -f $(PROGRAM) compilation_test.log linking_test.log cleanup_test.log mrproper_test.log *~ */*~ */*~ 

# Phony target
.PHONY: do_clean header link_header compile_header

